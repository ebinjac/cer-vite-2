/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ServiceidImport } from './routes/serviceid'
import { Route as ReportsImport } from './routes/reports'
import { Route as PlanningImport } from './routes/planning'
import { Route as CertificatesImport } from './routes/certificates'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ServiceidRoute = ServiceidImport.update({
  id: '/serviceid',
  path: '/serviceid',
  getParentRoute: () => rootRoute,
} as any)

const ReportsRoute = ReportsImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRoute,
} as any)

const PlanningRoute = PlanningImport.update({
  id: '/planning',
  path: '/planning',
  getParentRoute: () => rootRoute,
} as any)

const CertificatesRoute = CertificatesImport.update({
  id: '/certificates',
  path: '/certificates',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/certificates': {
      id: '/certificates'
      path: '/certificates'
      fullPath: '/certificates'
      preLoaderRoute: typeof CertificatesImport
      parentRoute: typeof rootRoute
    }
    '/planning': {
      id: '/planning'
      path: '/planning'
      fullPath: '/planning'
      preLoaderRoute: typeof PlanningImport
      parentRoute: typeof rootRoute
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsImport
      parentRoute: typeof rootRoute
    }
    '/serviceid': {
      id: '/serviceid'
      path: '/serviceid'
      fullPath: '/serviceid'
      preLoaderRoute: typeof ServiceidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/certificates': typeof CertificatesRoute
  '/planning': typeof PlanningRoute
  '/reports': typeof ReportsRoute
  '/serviceid': typeof ServiceidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/certificates': typeof CertificatesRoute
  '/planning': typeof PlanningRoute
  '/reports': typeof ReportsRoute
  '/serviceid': typeof ServiceidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/certificates': typeof CertificatesRoute
  '/planning': typeof PlanningRoute
  '/reports': typeof ReportsRoute
  '/serviceid': typeof ServiceidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/certificates'
    | '/planning'
    | '/reports'
    | '/serviceid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/certificates' | '/planning' | '/reports' | '/serviceid'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/certificates'
    | '/planning'
    | '/reports'
    | '/serviceid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  CertificatesRoute: typeof CertificatesRoute
  PlanningRoute: typeof PlanningRoute
  ReportsRoute: typeof ReportsRoute
  ServiceidRoute: typeof ServiceidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  CertificatesRoute: CertificatesRoute,
  PlanningRoute: PlanningRoute,
  ReportsRoute: ReportsRoute,
  ServiceidRoute: ServiceidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/certificates",
        "/planning",
        "/reports",
        "/serviceid"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx"
    },
    "/certificates": {
      "filePath": "certificates.tsx"
    },
    "/planning": {
      "filePath": "planning.tsx"
    },
    "/reports": {
      "filePath": "reports.tsx"
    },
    "/serviceid": {
      "filePath": "serviceid.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
